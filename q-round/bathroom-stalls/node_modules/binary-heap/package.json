{
  "_args": [
    [
      {
        "raw": "binary-heap",
        "scope": null,
        "escapedName": "binary-heap",
        "name": "binary-heap",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/victor_sy_wang/Developer/codejam2017/bathroom-stalls"
    ]
  ],
  "_from": "binary-heap@latest",
  "_id": "binary-heap@1.1.0",
  "_inCache": true,
  "_location": "/binary-heap",
  "_npmUser": {
    "name": "tristanls",
    "email": "tristan.slominski@gmail.com"
  },
  "_npmVersion": "1.2.32",
  "_phantomChildren": {},
  "_requested": {
    "raw": "binary-heap",
    "scope": null,
    "escapedName": "binary-heap",
    "name": "binary-heap",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/binary-heap/-/binary-heap-1.1.0.tgz",
  "_shasum": "0802fbe768a86a3cab08ea70f3a78abee9940bc0",
  "_shrinkwrap": null,
  "_spec": "binary-heap",
  "_where": "/Users/victor_sy_wang/Developer/codejam2017/bathroom-stalls",
  "author": {
    "name": "Tristan Slominski",
    "email": "tristan.slominski@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/tristanls/node-binary-heap/issues"
  },
  "dependencies": {},
  "description": "Binary heap",
  "devDependencies": {
    "nodeunit": "0.8.1"
  },
  "directories": {},
  "dist": {
    "shasum": "0802fbe768a86a3cab08ea70f3a78abee9940bc0",
    "tarball": "https://registry.npmjs.org/binary-heap/-/binary-heap-1.1.0.tgz"
  },
  "homepage": "https://github.com/tristanls/node-binary-heap#readme",
  "keywords": [
    "heap",
    "binary heap",
    "datastructure",
    "data structure"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tristanls",
      "email": "tristan.slominski@gmail.com"
    }
  ],
  "name": "binary-heap",
  "optionalDependencies": {},
  "readme": "# binary-heap\n\n_Stability: 1 - [Experimental](https://github.com/tristanls/stability-index#stability-1---experimental)_\n\nBinary heap.\n\n## Installation\n\n    npm install binary-heap\n\n## Tests\n\n    npm test\n\n## Usage\n\n```javascript\nvar Heap = require('binary-heap');\n\nvar heap1 = new Heap();\nvar heap2 = Heap.build({heap: [3,7,2,1]});\n```\n\n## Overview\n\n## Documentation\n\n### Heap\n\nA JavaScript implementation of a binary heap.\n\n*WARNING*: This heap implementation uses 1-indexed arrays (instead of 0-indexed) arrays. Therefore, the indexes used in `Heap.left(index)`, `Heap.right(index)` and others, are assuming that the binary tree representing the heap has a root node at index = 1.\n\n#### Heap.build(options)\n\n  * `options` _Object_ see `new Heap(options)` documentation\n\nCreates a new Heap and if given `options.heap` will ensure that the returned heap satisfies the heap property dictated by `options.kind`.\n\n#### Heap.buildMaxHeap(array, heapSize)\n\n  * `array` _Array_ the 1-indexed array storage for the heap (array[0] will not be modified)\n  * `heapSize` _Integer_ heap size\n\nChanges the `array` in place so that it satisfies max heap property. Returns the resulting `array` for convenience.\n\n#### Heap.buildMinHeap(array, heapSize)\n\n  * `array` _Array_ the 1-indexed array storage for the heap (array[0] will not be modified)\n  * `heapSize` _Integer_ heap size\n\nChanges the `array` in place so that it satisfies min heap property. Returns the resulting `array` for convenience.\n\n#### Heap.left(index)\n\n  * `index` _Integer_ index of a node to find the left child of\n\nReturns the index of the left child for the node at index `index`.\n\n*WARNING*: this method is not safe, invalid input is not checked\n\n#### Heap.maxHeapify(array, index, heapSize)\n\n  * `array` _Array_ the 1-indexed array storage for the heap (array[0] will not be modified)\n  * `index` _Integer_ the array index to start maxHeapify procedure on\n  * `heapSize` _Integer_ heap size\n\nEnsures that the max-heap property is satisfied for the sub-tree rooted at `index` of the array representing a binary tree.\n\n#### Heap.minHeapify(array, index, heapSize)\n\n  * `array` _Array_ the 1-indexed array storage for the heap (array[0] will not be modified)\n  * `index` _Integer_ the array index to start minHeapify procedure on\n  * `heapSize` _Integer_ heap size\n\nEnsures that the min-heap property is satisfied for the sub-tree rooted at `index` of the array representing a binary tree.\n\n#### Heap.parent(index)\n\n  * `index` _Integer_ index of a node to find the parent of\n\nReturns the index of the parent for the node at index `index`.\n\n*WARNING*: this method is not safe, invalid input is not checked\n\n#### Heap.right(index)\n\n  * `index` _Integer_ index of a node to find the right child of\n\nReturns the index of the right child of the node at index `index`.\n\n*WARNING*: this method is not safe, invalid input is not checked\n\n#### new Heap(options)\n\n  * `options`:\n    * `heap`: _Array_ An optional array that will be used as initial heap state and not modified to satisfy the heap property.\n    * `kind`: _String_ One of `min-heap`, `max-heap` (default: `max-heap`)\n\nCreates a new Heap.\n\n#### heap.build()\n\nBuilds a max or min heap, depending on the heap kind. Returns the heap for convenience.\n\n#### heap.dump()\n\nDumps the present contents of storage used for the heap. The dump may include elements beyond heap size.\n\n#### heap.maxHeapify(index)\n\n  * `index` _Integer_ index of the node where to begin the procedure\n\nEnsures that the max-heap property is satisfied for the sub-tree rooted at `index`.\n\n#### heap.minHeapify(index)\n\n  * `index` _Integer_ index of the node where to begin the procedure\n\nEnsures that the min-heap property is satisfied for the sub-tree rooted at `index`.\n\n#### heap.size()\n\nReturns heap size.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/tristanls/node-binary-heap.git"
  },
  "scripts": {
    "test": "node scripts/test.js"
  },
  "version": "1.1.0"
}
